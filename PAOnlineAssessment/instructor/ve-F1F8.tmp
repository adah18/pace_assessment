using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.Security;
using System.Web.UI;
using System.Web.UI.WebControls;
using System.Web.UI.WebControls.WebParts;
using System.Web.UI.HtmlControls;
using System.Collections.Specialized;
using System.Data;
using System.IO;
using System.Drawing;
using PAOnlineAssessment.Classes;
using System.Diagnostics;
using OfficeOpenXml.Style;
using OfficeOpenXml;

namespace PAOnlineAssessment.instructor
{
    public partial class instructor_studentsview : System.Web.UI.Page
    {
        //Instantiate New Login User Class
        LoginUser LUser;
        //Instantiate New Global Forms Class
        GlobalForms DefaultForms = new Collections().getDefaultForms();
        //Instantiate New System Procedures Class
        SystemProcedures sys = new SystemProcedures();
        //Instantiate New Collections Class
        Collections cls = new Collections();
        //Declare List of Answer List
        List<Constructors.StudentAnswers> StudentAnswersList;
        //Declare List of students
        List<Constructors.StudentRegistrationView> StudentList;
        //Declare List of StudentAccounts
        List<Constructors.StudentAccount> StudentAccountList;
        //Declare List of Assessment
        List<Constructors.Assessment> AssessmentList;
        //Declare list of Registration Terms
        List<Constructors.RegistrationTerm> RegistrationTerm;
        //Declare list of assessments
        List<Constructors.Assessment> AssessmentType;
        //Page Load
        protected void Page_Load(object sender, EventArgs e)
        {
            try
            {
                LUser = (LoginUser)Session["LoggedUser"];
                if (LUser.UserGroupID == "1" || LUser.UserGroupID == "3")
                {
                }
                else
                {
                    Response.Write("<script>alert('Access Denied!'); window.location='" + ResolveUrl(DefaultForms.frm_instructor_subjects) + "';</script>");
                }
            }
            //if No Logged In User, redirect to Login Screen
            catch
            {
                Response.Redirect(ResolveUrl(DefaultForms.frm_index));
            }
            LoadSiteMapDetails();
            //Verify if page load is post back
            if (!IsPostBack)
            {
                //check if the selected subjects has assessment
                if (isHaveAssessment())
                {
                    //Load All Students based on subject selected
                    LoadAllStudent();
                    //Get all assessment type of the selected subject
                    GetAssessmentTypes();
                    //get all subitems 
                    GetAllSubitems();
                    //get all the scores of the students
                    GetScores();
                    //Generate all data gathered
                    GenerateGridViewData();
                    //load the merged data to main grid
                    LoadToDynamicGridView();


                }
                else
                {
                    Response.Write("<script>alert('Subject still does not have an assessment');window.location='" + ResolveUrl(DefaultForms.frm_index) + "'</script>");
                }
            }
        }

        //Load info for the site map
        public void LoadSiteMapDetails()
        {
            SiteMap1.RootNode = "Dashboard";
            SiteMap1.RootNodeToolTip = "Dashboard";
            SiteMap1.RootNodeURL = ResolveUrl(DefaultForms.frm_index);

            SiteMap1.ParentNode = "My Subjects";
            SiteMap1.ParentNodeToolTip = "Click to go back to My Subjects";
            SiteMap1.ParentNodeURL = ResolveUrl(DefaultForms.frm_instructor_subjects);

            SiteMap1.CurrentNode = "Teachers View";
        }
        //verify if the selected subject has assessment
        bool isHaveAssessment()
        {
            bool isHave = false;
            AssessmentList = new List<Constructors.Assessment>(cls.getAssessment());
            AssessmentList.ForEach(al =>
            {
                if (al.SubjectID == Convert.ToInt32(Request.QueryString["subid"])) isHave = true;
            });
            return isHave;
        }
        #region "Loading Scores"
        //load all students based on the selected subject
        void LoadAllStudent()
        {
            // retreive the subject id and section id from querystring
            int SubjectID = Convert.ToInt32(Request.QueryString["subid"]);
            int SectionID = Convert.ToInt32(Request.QueryString["secid"]);
            //create datatable that will temporarily hold all the students 
            DataTable dt = new DataTable();
            //create column
            dt.Columns.Add("StudentNumber");
            dt.Columns.Add("StudentName");
            dt.Columns.Add("StudentID");
            //Declare new studentlist
            StudentList = new List<Constructors.StudentRegistrationView>(cls.getStudentRegistrationView());
            //Declare new RegistrationTerm
            RegistrationTerm = new List<Constructors.RegistrationTerm>(cls.getRegistrationTerm());
            //Declare New StudentAccount List
            StudentAccountList = new List<Constructors.StudentAccount>(cls.getStudentAccounts());

            
            RegistrationTerm.ForEach(rt =>
            {  
                //verify if section and subject id match the ids in RegistrationTerm
                if (rt.SectionID == SectionID && rt.SubjectID == SubjectID)
                {
                   
                    StudentList.ForEach(sl =>
                    {
                        //verify if the section id match the section id of the student
                        if (sl.SectionID == SectionID)
                        {
                           
                            StudentAccountList.ForEach(sa =>
                            {
                               
                                //verify if the studentnumber in studentlist match the studentnumber in studentaccountlist
                                if (sl.StudentNumber == sa.StudentNumber)
                                {
                                    //if all requirement match add the student to the datatable
                                    dt.Rows.Add(
                                        sa.StudentNumber,
                                        sa.Lastname + ", " + sa.Firstname,
                                       sl.StudentID
                                        );
                                }
                            });
                        }
                    });
                }
            });

            //pass the value of a datatable to a session in case of postback the value will not lost.
            Session["StudentLists"] = dt;
            //grdView.DataSource = Session["StudentLists"];
            //grdView.DataBind();

        }

        //get all the assessment type for the selected subject
        void GetAssessmentTypes()
        {
            //get the subject and section id
            int SubjectID = Convert.ToInt32(Request.QueryString["subid"]);
            int SectionID = Convert.ToInt32(Request.QueryString["secid"]);
            DataTable dt = new DataTable();
            dt.Columns.Add("AssessmentTypeID");
            dt.Columns.Add("Title");

            //get all assessment type id
            AssessmentType = new List<Constructors.Assessment>(cls.getAssessmentTypeID(SubjectID));
            AssessmentType.ForEach(at =>
            {
                dt.Rows.Add(at.AssessmentTypeID.ToString());
            });

            //get the title for the assessment type
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                string title = cls.ExecuteScalar("Select Description from PaceAssessment.dbo.AssessmentType Where AssessmentTypeID=" + Convert.ToInt32(dt.Rows[i][0].ToString()) + " ");
                
                if (title != "")
                {
                    //if title is not empty then add the title to the data table
                    dt.Rows[i][1] = title;
                }
            }
            //pass the value of the data table to session
            Session["AssessmentTypes"] = dt;

            cboAssessment.Items.Clear();
            for (int i = 0; i < dt.Rows.Count; i++)
            {
                cboAssessment.Items.Add(new ListItem(dt.Rows[i][1].ToString(), dt.Rows[i][0].ToString()));
            }
        }

        //Get all the sub items for each type
        void GetAllSubitems()
        {
            //get the subject and section id
            int SubjectID = Convert.ToInt32(Request.QueryString["subid"]);
            int SectionID = Convert.ToInt32(Request.QueryString["secid"]);
            //get the value for the session
            DataTable AssessmentTypes = (DataTable)Session["AssessmentTypes"];
            //create data table
            DataTable dt = new DataTable();
            //create column
            dt.Columns.Add("AssessmentID");
            dt.Columns.Add("Title");
            dt.Columns.Add("AssessmentTypeID");

            //search for subitem that will match the selected subject and assessment typeid
            for (int i = 0; i < 1; i++)
            {
                AssessmentType = new List<Constructors.Assessment>(cls.getAssessment());
                AssessmentType.ForEach(at =>
                {
                    if (SubjectID == at.SubjectID && Convert.ToInt32(cboAssessment.SelectedValue) == at.AssessmentTypeID)
                    {
                        dt.Rows.Add(at.AssessmentID, at.Title, at.AssessmentTypeID);
                    }
                });

            }
            //pass the data to a session
            Session["Subitems"] = dt;
        }
        //Generate all data gathered
        void GenerateGridViewData()
        {
            //declare data table for scores
            DataTable Scores = (DataTable)Session["Scores"];
            //declare data table for student list
            DataTable StudentLists = (DataTable)Session["StudentLists"];
            //declare data table for subitems
            DataTable Subitems = (DataTable)Session["Subitems"];
            //declare a data table
            DataTable dt = new DataTable();
            //create columns
            dt.Columns.Add("Count");
            dt.Columns.Add("StudentName");
            
            //add columns based on all sub items
            for (int i = 0; i < Subitems.Rows.Count; i++)
            {
                dt.Columns.Add(Subitems.Rows[i][1].ToString());
            }
            //Add Data to the data table
            for (int i = 0; i < StudentLists.Rows.Count; i++)
            {
                //add count number and student name
                dt.Rows.Add(i + 1, StudentLists.Rows[i][1].ToString());
                for (int j = 0; j < Subitems.Rows.Count; j++)
                {
                    dt.Rows[dt.Rows.Count - 1][j + 2] = GetAssessmentScore(Convert.ToInt32(StudentLists.Rows[i][2]), Convert.ToInt32(Subitems.Rows[j][0]));
                }
               
            }

            //pass the data tables value to a session
            Session["MainGrid"] = dt;
            grdView.DataSource = Session["MainGrid"];
            grdView.DataBind();
        }
        string GetAssessmentScore(int StudentID, int AssessmentID)
        {
            string final_score = "";
            AssessmentList = new List<Constructors.Assessment>(cls.getAssessment());
            AssessmentList.ForEach(al =>
            {
                if (al.AssessmentID == AssessmentID)
                {
                    if (isAssessmentTaken(StudentID, AssessmentID))
                    {
                        double score = 0;
                        StudentAnswersList = new List<Constructors.StudentAnswers>(cls.getStudentAnswersList());
                        StudentAnswersList.ForEach(sa =>
                        {
                            if (sa.StudentID == StudentID && sa.AssessmentID == AssessmentID)
                            {
                                string ans = cls.ExecuteScalar("Select CorrectAnswer From PaceAssessment.dbo.QuestionPoolView Where QuestionPoolID=" + sa.QuestionPoolID + "");
                                if (ans == sa.SelectedAnswer)
                                {
                                    //get the points for the question
                                    string points = cls.ExecuteScalar("Select Points From PaceAssessment.dbo.AssessmentDetails Where AssessmentID=" + sa.AssessmentID + "");
                                    //add the point to the current score
                                    score += Convert.ToDouble(points);
                                }
                                else
                                {
                                    //if the selected score did not match no point will be added
                                    score += 0;
                                }

                            }
                        });

                        final_score = score.ToString();
                    }
                    else
                    {
                        string DateS = Convert.ToDateTime(al.DateStart).ToShortDateString() + " " + al.TimeStart;
                        DateTime DateStart = Convert.ToDateTime(DateS);
                        string DateE = Convert.ToDateTime(al.DateEnd).ToShortDateString() + " " + al.TimeEnd;
                        DateTime DateEnd = Convert.ToDateTime(DateE);
                        if (DateStart >= DateTime.Now)
                        {
                            //Debug.WriteLine(Subitems.Rows[j][1].ToString() + " is not yet taken");
                            final_score = "-";
                        }
                        else if (DateEnd < DateTime.Now)
                        {
                            //Debug.WriteLine(Subitems.Rows[j][1].ToString() + " is not taken");
                            final_score = "0";
                        }
                        else
                        {
                            final_score = "-";
                        }
                    }

                }
            });

            return final_score;
        }

        bool isAssessmentTaken(int StudentID, int AssessmentID)
        {
            bool x = false;
            StudentAnswersList = new List<Constructors.StudentAnswers>(cls.getStudentAnswersList());
            StudentAnswersList.ForEach(sa =>
            {
                if (sa.StudentID == StudentID && sa.AssessmentID == AssessmentID)
                {
                    x = true;
                }
            });
            return x;
        }
        //get the scores of a students for the assessment
        void GetScores()
        {
            DataTable StudentLists = (DataTable)Session["StudentLists"];
            DataTable Subitems = (DataTable)Session["Subitems"];
            DataTable dt = new DataTable();
            dt.Columns.Add("StudentID");
            dt.Columns.Add("AssessmentID");
            dt.Columns.Add("Score");
            dt.Columns.Add("Title");

        }
        #endregion
        #region "Create Column Dynamically"
        //Create Gridview with dynamic templates
        void LoadToDynamicGridView()
        {
            //create new template
            TemplateField RowCount = new TemplateField();
            //add info for the item template
            RowCount.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "Count", "Count");
            //add info for the header template
            //RowCount.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "No", "No");
            //add the template to the fgrid view
            grdStudentsList.Columns.Add(RowCount);


            TemplateField StudentName = new TemplateField();
            StudentName.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, "StudentName", "StudentName");
            //StudentName.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, "StudentName", "StudentName");
            grdStudentsList.Columns.Add(StudentName);

            //get the score for creating its templates
            DataTable types = (DataTable)Session["Subitems"];
            for (int i = 0; i < types.Rows.Count; i++)
            {
               TemplateField AssessmentType = new TemplateField();

               AssessmentType.ItemTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Item, types.Rows[i][1].ToString(), types.Rows[i][1].ToString());
               AssessmentType.HeaderTemplate = new DynamicallyTemplatedGridViewHandler(ListItemType.Header, types.Rows[i][1].ToString(), types.Rows[i][1].ToString());
                grdStudentsList.Columns.Add(AssessmentType);
            }

            //generating the design of the grid view
            grdStudentsList.Columns[1].ItemStyle.Width = Unit.Pixel(150);
            grdStudentsList.Columns[1].HeaderStyle.Width = Unit.Pixel(150);
            for (int i = 0; i < grdStudentsList.Columns.Count; i++)
            {
                grdStudentsList.Columns[1].HeaderStyle.Width = Unit.Pixel(20);

                grdStudentsList.Columns[i].HeaderStyle.BackColor = Color.White;
                grdStudentsList.Columns[i].HeaderStyle.BorderColor = Color.Black;
                grdStudentsList.Columns[i].HeaderStyle.BorderStyle = BorderStyle.Solid;
                grdStudentsList.Columns[i].HeaderStyle.ForeColor = Color.Blue;
                grdStudentsList.Columns[i].HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                grdStudentsList.Columns[i].HeaderStyle.VerticalAlign = VerticalAlign.Middle;
                grdStudentsList.Columns[i].HeaderStyle.Wrap = false;

                grdStudentsList.Columns[1].ItemStyle.Width = Unit.Pixel(20);
                grdStudentsList.Columns[i].ItemStyle.BackColor = Color.White;
                grdStudentsList.Columns[i].ItemStyle.BorderColor = Color.Black;
                grdStudentsList.Columns[i].ItemStyle.BorderStyle = BorderStyle.Solid;
                grdStudentsList.Columns[i].ItemStyle.ForeColor = Color.Black;
                grdStudentsList.Columns[i].ItemStyle.HorizontalAlign = HorizontalAlign.Center;
                grdStudentsList.Columns[i].ItemStyle.VerticalAlign = VerticalAlign.Middle;
                grdStudentsList.Columns[i].ItemStyle.Wrap = false;
            }
            grdStudentsList.Columns[0].Visible = false;
            //add datasource to the grid view
            grdStudentsList.DataSource = Session["MainGrid"];
            grdStudentsList.DataBind();
        }
        #endregion


        //for assessment type header in the grid view
        protected void grdStudentsList_RowCreated(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.Header)
            {
                DataTable AssessmentType = (DataTable)Session["AssessmentTypes"];
                DataTable Subitems= (DataTable)Session["Subitems"];
                GridView HeaderGrid = (GridView)sender;
                GridViewRow HeaderGridRow = new GridViewRow(0, 0, DataControlRowType.Header,DataControlRowState.Insert);
                TableCell HeaderCell;

                HeaderCell = new TableCell();
                HeaderCell.Text = "No";
                HeaderCell.ColumnSpan = 1;
                HeaderCell.VerticalAlign = VerticalAlign.Middle;
                HeaderCell.BackColor = ColorTranslator.FromHtml("#3F5330");
                HeaderCell.BorderColor = Color.Black;
                HeaderCell.BorderStyle = BorderStyle.Solid;
                HeaderCell.ForeColor = Color.White;
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.Wrap = false;
                HeaderGridRow.Cells.Add(HeaderCell);

                HeaderCell = new TableCell();
                HeaderCell.Text = "Name";
                HeaderCell.ColumnSpan = 1;
                HeaderCell.VerticalAlign = VerticalAlign.Middle;
                HeaderCell.BackColor = ColorTranslator.FromHtml("#3F5330");
                HeaderCell.BorderColor = Color.Black;
                HeaderCell.BorderStyle = BorderStyle.Solid;
                HeaderCell.ForeColor = Color.White;
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.Wrap = false;
                HeaderGridRow.Cells.Add(HeaderCell);

                for (int i = 0; i < AssessmentType.Rows.Count; i++)
                {
                    if (AssessmentType.Rows[i][0].ToString() == cboAssessment.SelectedValue)
                    {
                        int count = 0;
                        for (int j = 0; j < Subitems.Rows.Count; j++)
                        {
                            if (AssessmentType.Rows[i][0].ToString() == Subitems.Rows[j][2].ToString()) count++;
                        }

                        HeaderCell = new TableCell();
                        HeaderCell.Text = AssessmentType.Rows[i][1].ToString();
                        HeaderCell.ColumnSpan = count;
                        HeaderCell.VerticalAlign = VerticalAlign.Middle;
                        HeaderCell.BackColor = ColorTranslator.FromHtml("#3F5330");
                        HeaderCell.BorderColor = Color.Black;
                        HeaderCell.BorderStyle = BorderStyle.Solid;
                        HeaderCell.ForeColor = Color.White;
                        HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                        HeaderCell.Wrap = false;
                        HeaderGridRow.Cells.Add(HeaderCell);
                    }
                }
                grdStudentsList.Controls[0].Controls.AddAt(0, HeaderGridRow);
            }
        }

        #region "Exporting Files"

        public void ExportToExcel()
        {
            //string attachment = "attachment; filename=ExportedScore_" + cboAssessment.SelectedItem.Text +  ".xlsx";
            //Response.ClearContent();
            //Response.Clear();
            //Response.AddHeader("content-disposition", attachment);
            //Response.ContentType = "application/ms-excel";
            //StringWriter sw = new StringWriter();
            //HtmlTextWriter htw = new HtmlTextWriter(sw);

            //grdView.RenderControl(htw);
            //Response.Write(sw.ToString());
            //Response.End();


            DataTable dt = (DataTable)Session["MainGrid"];
            Debug.WriteLine(grdStudentsList.Columns.Count.ToString());
            Debug.WriteLine(dt.Columns.Count.ToString());

            ExcelPackage pck = new ExcelPackage();
            var ws = pck.Workbook.Worksheets.Add("Sample1");
            
            ws.Cells[1, 1].Value = "GRADING SHEET"; // Heading Name
            ws.Cells[1, 1].Style.Font.Bold = true;
            ws.Cells[1, 1, 1, dt.Columns.Count].Merge = true; //Merge columns start and end range
            ws.Cells[1, 1, 1, dt.Columns.Count].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            ws.Cells[2, 1].Value = cls.ExecuteScalar("Select Description From PaceRegistration.dbo.Subject Where SubjectID = " + Request.QueryString["subid"]); // Heading Name
            ws.Cells[2, 1, 2, dt.Columns.Count].Merge = true; //Merge columns start and end range
            ws.Cells[2, 1, 2, dt.Columns.Count].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            ws.Cells[2, 1].Style.Font.Bold = true;

            ws.Cells[3, 1].Value = cls.ExecuteScalar("SELECT Distinct([Level-Section]) FROM [PaceRegistration].[dbo].[GradingView] Where SectionID = " + Request.QueryString["secid"]); // Heading Name
            ws.Cells[3, 1, 3, dt.Columns.Count].Merge = true; //Merge columns start and end range
            ws.Cells[3, 1, 3, dt.Columns.Count].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
            ws.Cells[3, 1].Style.Font.Bold = true;

            ws.Cells[4, 1].Value = "No.";
            ws.Cells[4, 1].Style.Font.Bold = true;

            ws.Cells[4, 2].Value = "Student Name";
            ws.Cells[4, 2].Style.Font.Bold = true;

            ws.Cells[4, 3].Value = cboAssessment.SelectedItem.Text;
            ws.Cells[4, 3].Style.Font.Bold = true;
            ws.Cells[4, 3, 4, dt.Columns.Count].Merge = true;
            ws.Cells[4, 3, 4, dt.Columns.Count].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;

            for (int j = 0; j < dt.Columns.Count - 2; j++)
            {
                ws.Cells[5, j + 3].Value = dt.Columns[j + 2].ColumnName.ToString();
                Color blue = Color.Blue;
                ws.Cells[5, j + 3].Style.Font.Color.SetColor(blue);
            }

            for (int i = 0; i < dt.Rows.Count; i++)
            {
                for (int j = 0; j < dt.Columns.Count; j++)
                {
                      int RowNum = i + 1;
                      ws.Cells[RowNum + 5 , j+1].Value = dt.Rows[i][j];
                      if (j != 1)
                      {
                          ws.Cells[RowNum + 5, j + 1].Style.HorizontalAlignment = ExcelHorizontalAlignment.Center;
                      }
                }
            }

            Response.Clear();
            pck.SaveAs(Response.OutputStream);
            Response.ContentType = "application/vnd.openxmlformats-officedocument.spreadsheetml.sheet";
            Response.AddHeader("content-disposition", "attachment;  filename=Sample1.xlsx");
            Response.End();

        }

        public override void VerifyRenderingInServerForm(Control control)
        {

        }

        protected void grdView_RowCreated(object sender, GridViewRowEventArgs e)
        {
            if (e.Row.RowType == DataControlRowType.Header)
            {
                DataTable AssessmentType = (DataTable)Session["AssessmentTypes"];
                DataTable Subitems = (DataTable)Session["Subitems"];
                GridView HeaderGrid = (GridView)sender;
                GridViewRow HeaderGridRow = new GridViewRow(0, 0, DataControlRowType.Header, DataControlRowState.Insert);
                TableCell HeaderCell;



                HeaderCell = new TableCell();
                HeaderCell.Text = "No";
                HeaderCell.ColumnSpan = 1;
                HeaderCell.VerticalAlign = VerticalAlign.Middle;
                HeaderCell.BackColor = ColorTranslator.FromHtml("#3F5330");
                HeaderCell.BorderColor = Color.Black;
                HeaderCell.BorderStyle = BorderStyle.Solid;
                HeaderCell.ForeColor = Color.White;
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.Wrap = false;
                HeaderGridRow.Cells.Add(HeaderCell);

                HeaderCell = new TableCell();
                HeaderCell.Text = "Name";
                HeaderCell.ColumnSpan = 1;
                HeaderCell.VerticalAlign = VerticalAlign.Middle;
                HeaderCell.BackColor = ColorTranslator.FromHtml("#3F5330");
                HeaderCell.BorderColor = Color.Black;
                HeaderCell.BorderStyle = BorderStyle.Solid;
                HeaderCell.ForeColor = Color.White;
                HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                HeaderCell.Wrap = false;
                HeaderGridRow.Cells.Add(HeaderCell);

                for (int i = 0; i < AssessmentType.Rows.Count; i++)
                {
                    if (AssessmentType.Rows[i][0].ToString() == cboAssessment.SelectedValue)
                    {
                        int count = 0;
                        for (int j = 0; j < Subitems.Rows.Count; j++) { if (AssessmentType.Rows[i][0].ToString() == Subitems.Rows[j][2].ToString()) count++; }

                        HeaderCell = new TableCell();
                        HeaderCell.Text = AssessmentType.Rows[i][1].ToString();
                        HeaderCell.ColumnSpan = count;
                        HeaderCell.VerticalAlign = VerticalAlign.Middle;
                        HeaderCell.BackColor = ColorTranslator.FromHtml("#3F5330");
                        HeaderCell.BorderColor = Color.Black;
                        HeaderCell.BorderStyle = BorderStyle.Solid;
                        HeaderCell.ForeColor = Color.White;
                        HeaderCell.HorizontalAlign = HorizontalAlign.Center;
                        HeaderCell.Wrap = false;
                        HeaderGridRow.Cells.Add(HeaderCell);
                    }
                }
                grdView.Controls[0].Controls.AddAt(0, HeaderGridRow);
            }
        }
        #endregion

        protected void lnkExport_Click(object sender, EventArgs e)
        {
            grdView.Visible = true;
            ExportToExcel();
            grdView.Visible = false;
        }

        protected void cboSearchQuery_SelectedIndexChanged(object sender, EventArgs e)
        {


      

        }

        protected void cboAssessment_SelectedIndexChanged(object sender, EventArgs e)
        {
            for (int i = 1; i < grdStudentsList.Columns.Count; i++)
            {
                grdStudentsList.Columns[i].Visible = false;
            }

            //get all subitems 
            GetAllSubitems();
            //get all the scores of the students
            GetScores();
            //Generate all data gathered
            GenerateGridViewData();
            //load the merged data to main grid
            LoadToDynamicGridView();
        }

      

        
    }
    #region "dynamic"
    public class DynamicallyTemplatedGridViewHandler : IBindableTemplate
    {
        ListItemType ItemType;
        string FieldName;
        string InfoType;

        public DynamicallyTemplatedGridViewHandler(ListItemType item_type, string field_name, string info_type)
        {
            ItemType = item_type;
            FieldName = field_name;
            InfoType = info_type;
        }

        public void InstantiateIn(System.Web.UI.Control Container)
        {
            switch (ItemType)
            {
                case ListItemType.Header:
                    Literal header_ltrl = new Literal();
                    header_ltrl.Text = "<b>" + FieldName + "</b>";
                    Container.Controls.Add(header_ltrl);
                    break;
                case ListItemType.Item:
                    switch (InfoType)
                    {
                        case "Command":
                            ImageButton edit_button = new ImageButton();
                            edit_button.ID = "edit_button";
                            edit_button.ImageUrl = "~/images/edit.gif";
                            edit_button.CommandName = "Edit";
                            edit_button.Click += new ImageClickEventHandler(edit_button_Click);
                            edit_button.ToolTip = "Edit";
                            Container.Controls.Add(edit_button);

                            ImageButton delete_button = new ImageButton();
                            delete_button.ID = "delete_button";
                            delete_button.ImageUrl = "~/images/delete.gif";
                            delete_button.CommandName = "Delete";
                            delete_button.ToolTip = "Delete";
                            delete_button.OnClientClick = "return confirm('Are you sure to delete the record?')";
                            Container.Controls.Add(delete_button);

                            /* Similarly add button for insert.
                             * It is important to know when 'insert' button is added 
                             * its CommandName is set to "Edit"  like that of 'edit' button 
                             * only because we want the GridView enter into Edit mode, 
                             * and this time we also want the text boxes for corresponding fields empty*/
                            ImageButton insert_button = new ImageButton();
                            insert_button.ID = "insert_button";
                            insert_button.ImageUrl = "~/images/insert.bmp";
                            insert_button.CommandName = "Edit";
                            insert_button.ToolTip = "Insert";
                            insert_button.Click += new ImageClickEventHandler(insert_button_Click);
                            Container.Controls.Add(insert_button);

                            break;

                        default:
                            Label field_lbl = new Label();
                            field_lbl.ID = FieldName;
                            field_lbl.Text = String.Empty; //we will bind it later through 'OnDataBinding' event
                            field_lbl.DataBinding += new EventHandler(OnDataBinding);
                            Container.Controls.Add(field_lbl);
                            break;

                    }
                    break;
                case ListItemType.EditItem:
                    if (InfoType == "Command")
                    {
                        ImageButton update_button = new ImageButton();
                        update_button.ID = "update_button";
                        update_button.CommandName = "Update";
                        update_button.ImageUrl = "~/images/update.gif";
                        if ((int)new Page().Session["InsertFlag"] == 1)
                            update_button.ToolTip = "Add";
                        else
                            update_button.ToolTip = "Update";
                        update_button.OnClientClick = "return confirm('Are you sure to update the record?')";
                        Container.Controls.Add(update_button);

                        ImageButton cancel_button = new ImageButton();
                        cancel_button.ImageUrl = "~/images/cancel.gif";
                        cancel_button.ID = "cancel_button";
                        cancel_button.CommandName = "Cancel";
                        cancel_button.ToolTip = "Cancel";
                        Container.Controls.Add(cancel_button);

                    }
                    else// for other 'non-command' i.e. the key and non key fields, bind textboxes with corresponding field values
                    {
                        TextBox field_txtbox = new TextBox();
                        field_txtbox.ID = FieldName;
                        field_txtbox.Text = String.Empty;
                        // if Inert is intended no need to bind it with text..keep them empty
                        if ((int)new Page().Session["InsertFlag"] == 0)
                            field_txtbox.DataBinding += new EventHandler(OnDataBinding);
                        Container.Controls.Add(field_txtbox);

                    }
                    break;

            }

        }

        public IOrderedDictionary ExtractValues(Control Container)
        {
            OrderedDictionary dictionary = new OrderedDictionary();
            if (ItemType == ListItemType.EditItem)
            {
                string field_text = ((TextBox)Container.Controls[0]).Text;
                dictionary.Add(FieldName, field_text);
            }
            else
            {
                string field_text = ((Label)Container.Controls[0]).Text;
                dictionary.Add(FieldName, field_text);

            }
            return dictionary;
        }
        //just sets the insert flag ON so that we ll be able to decide in OnRowUpdating event whether to insert or update
        protected void insert_button_Click(Object sender, EventArgs e)
        {
            new Page().Session["InsertFlag"] = 1;
        }
        //just sets the insert flag OFF so that we ll be able to decide in OnRowUpdating event whether to insert or update 
        protected void edit_button_Click(Object sender, EventArgs e)
        {
            new Page().Session["InsertFlag"] = 0;
        }

        private void OnDataBinding(object sender, EventArgs e)
        {

            object bound_value_obj = null;
            Control ctrl = (Control)sender;
            IDataItemContainer data_item_container = (IDataItemContainer)ctrl.NamingContainer;
            //Debug.WriteLine("FieldName: " + FieldName);
            bound_value_obj = DataBinder.Eval(data_item_container.DataItem, FieldName);
            //Debug.WriteLine("laman boy: " + bound_value_obj.ToString());

            switch (ItemType)
            {
                case ListItemType.Item:
                    Label field_ltrl = (Label)sender;
                    field_ltrl.Text = bound_value_obj.ToString();

                    break;
                case ListItemType.EditItem:
                    TextBox field_txtbox = (TextBox)sender;
                    field_txtbox.Text = bound_value_obj.ToString();

                    break;
            }


        }
    }
    #endregion
}
