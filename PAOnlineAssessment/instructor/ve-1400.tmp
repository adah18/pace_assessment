using System;
using System.Collections.Generic;
using System.Linq;
using System.Web;
using System.Web.UI;
using System.Web.UI.WebControls;
using PAOnlineAssessment.Classes;
using System.Globalization;
using System.Data.OleDb;
using System.Data;

namespace PAOnlineAssessment.instructor
{
    public partial class assessment_evaluation : System.Web.UI.Page
    {
        LoginUser LUser;

        GlobalForms DefaultForms = new Collections().getDefaultForms();

        Collections cls = new Collections();

        List<Constructors.RegistrationTerm> oRegistrationTerm;

        List<Constructors.Subject> oSubject;

        List<Constructors.AssessmentType> oAssessmentType;

        List<Constructors.AssessmentView> oAssessment;

        List<Constructors.GradingView> oGradingView;

        List<Constructors.StudentRegistrationView> oStudentListRegistration;

        List<Constructors.StudentAccount> oStudentListAssessment;

        List<Constructors.StudentAnswers> oStudentAnswer;

        List<Constructors.User> UsersList;

        List<Constructors.QuestionPool> OQuestion;

        List<Constructors.AssessmentDetails> oAssessmentDetails;

        protected void Page_Load(object sender, EventArgs e)
        {
            //Check if a User Is Logged In
            try
            {
                LUser = (LoginUser)Session["LoggedUser"];
                if (LUser.UserGroupID == "1" || LUser.UserGroupID == "3")
                {

                }
                else
                {
                    Response.Write("<script>alert('Access Denied!'); window.location='" + ResolveUrl(DefaultForms.frm_index) + "';</script>");
                }
            }
            //Redirect to Login Page when no User is logged in
            catch
            {
                Response.Redirect(ResolveUrl(DefaultForms.frm_index));
            }

            if (!Page.IsPostBack)
            {
                LoadTeachers(conv.ToInt32(LUser.UserGroupID));

                loadLevels();

                loadSubjects();

                loadSections();

                loadAssessmentType();

                loadAssessment();

                loadAssessmentEvaluation();
            }
        }

        protected void cboTeacher_SelectedIndexChanged(object sender, EventArgs e)
        {
            loadLevels();
            loadSubjects();
            loadSections();
            loadAssessment();
            loadAssessmentEvaluation();
        }

        void loadAssessmentEvaluation()
        {
            int CountCorrect = 0;
            int CountIncorrect = 0;
            int TotalCount = 0;
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("QuestionID"));
            dt.Columns.Add(new DataColumn("Question"));
            dt.Columns.Add(new DataColumn("Correct"));
            dt.Columns.Add(new DataColumn("Incorrect"));

            oAssessmentDetails = new List<Constructors.AssessmentDetails>(cls.getAssessmentDetails());
            OQuestion = new List<Constructors.QuestionPool>(cls.getQuestionPool());

            oStudentAnswer = new List<Constructors.StudentAnswers>(cls.getStudentAnswersList());
            oStudentListRegistration = new List<Constructors.StudentRegistrationView>(cls.getStudentRegistrationView());
            oStudentListAssessment = new List<Constructors.StudentAccount>(cls.getStudentAccounts());

            oAssessmentDetails.ForEach(ad =>
                {
                    if (ad.AssessmentID.ToString() == cboAssessment.SelectedValue)
                    {

                    }
                });
        }

        void loadAssessment()
        {
            cboAssessment.Items.Clear();
            cboAssessment.Items.Add("--- Select Assessment ---");
            cboAssessment.Items[cboAssessment.Items.Count - 1].Value = "0";

            oAssessment = new List<Constructors.AssessmentView>(cls.getAssessmentView());

            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("AssessmentID"));
            dt.Columns.Add(new DataColumn("Title"));

            oAssessment.ForEach(a =>
            {
                if (a.UserID.ToString() == cboTeacher.SelectedValue && a.LevelID == Convert.ToInt32(cboGradeLevel.SelectedValue) && a.SubjectID == Convert.ToInt32(cboSubject.SelectedValue) && a.AssessmentTypeID == Convert.ToInt32(cboAssessmentType.SelectedValue))
                {
                    dt.Rows.Add(a.AssessmentID, a.Title);
                }
            });

            foreach (DataRow dRow in dt.DefaultView.ToTable(true, new string[] { "AssessmentID", "Title" }).Rows)
            {
                cboAssessment.Items.Add(dRow[1].ToString());
                cboAssessment.Items[cboAssessment.Items.Count - 1].Value = dRow[0].ToString();
            }
        }

        void loadAssessmentType()
        {
            cboAssessmentType.Items.Clear();
            cboAssessmentType.Items.Add("--- Select Assessment Type ---");
            cboAssessmentType.Items[cboAssessmentType.Items.Count - 1].Value = "0";

            oAssessmentType = new List<Constructors.AssessmentType>(cls.getAssessmentType());

            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("AssessmentTypeID"));
            dt.Columns.Add(new DataColumn("AssessmentDescription"));

            oAssessmentType.ForEach(at =>
            {
                dt.Rows.Add(at.AssessmentTypeID, at.Description);
            });

            //Loop through Filtered Duplicate values in the DataTable
            foreach (DataRow drow in dt.DefaultView.ToTable(true, new string[] { "AssessmentTypeID", "AssessmentDescription" }).Rows)
            {
                //Add to Grade / Level DropDownList
                cboAssessmentType.Items.Add(drow[1].ToString());
                cboAssessmentType.Items[cboAssessmentType.Items.Count - 1].Value = drow[0].ToString();
            }
        }

        void LoadTeachers(int UserGroupID)
        {
            UsersList = new List<Constructors.User>(cls.getUsers());
            UsersList.ForEach(ul =>
            {
                if (ul.UserGroupID == 3)
                {
                    cboTeacher.Items.Add(new ListItem(ul.LastName + ", " + ul.FirstName, ul.UserID.ToString()));
                }
            });
            if (UserGroupID == 1)
            {
                cboTeacher.Enabled = true;
            }
            else
            {
                for (int i = 0; i < cboTeacher.Items.Count; i++)
                {
                    if (cboTeacher.Items[i].Value == LUser.UserID.ToString())
                    {
                        cboTeacher.Items[i].Selected = true;
                    }
                }
                cboTeacher.Enabled = false;
            }
        }

        void loadLevels()
        {
            cboGradeLevel.Items.Clear();
            cboGradeLevel.Items.Add("--- Select Level ---");
            cboGradeLevel.Items[cboGradeLevel.Items.Count - 1].Value = "0";

            //Instantiate new List
            oRegistrationTerm = new List<Constructors.RegistrationTerm>(cls.getRegistrationTerm());
            oGradingView = new List<Constructors.GradingView>(cls.getGradingView());

            //Create a DataTable containing the LevelID and LevelDescription
            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("LevelID"));
            dt.Columns.Add(new DataColumn("LevelDescription"));

            oGradingView.ForEach(gv =>
            {
                if (gv.TeacherID.ToString() == cboTeacher.SelectedValue)
                {
                    //Loop through List of Registration Terms
                    oRegistrationTerm.ForEach(rt =>
                    {
                        if (gv.LevelID == rt.LevelID)
                        {
                            //Add LevelID and LevelDescription to the Datatable
                            dt.Rows.Add(rt.LevelID, rt.LevelDescription);
                        }
                    });
                }
            });

            //Loop through Filtered Duplicate values in the DataTable
            foreach (DataRow drow in dt.DefaultView.ToTable(true, new string[] { "LevelID", "LevelDescription" }).Rows)
            {
                //Add to Grade / Level DropDownList
                cboGradeLevel.Items.Add(drow[1].ToString());
                cboGradeLevel.Items[cboGradeLevel.Items.Count - 1].Value = drow[0].ToString();
            }
        }

        void loadSubjects()
        {
            //clear all items that inside the combobox
            cboSubject.Items.Clear();
            cboSubject.Items.Add("--- Select Subject ---");
            cboSubject.Items[cboSubject.Items.Count - 1].Value = "0";

            oSubject = new List<Constructors.Subject>(new Collections().getSubjectList());
            oGradingView = new List<Constructors.GradingView>(cls.getGradingView());

            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("SubjectID"));
            dt.Columns.Add(new DataColumn("SubjectDescription"));

            oGradingView.ForEach(gv =>
            {
                if (gv.TeacherID.ToString() == cboTeacher.SelectedValue.ToString())
                {
                    oSubject.ForEach(s =>
                    {
                        if (s.LevelID == Convert.ToInt32(cboGradeLevel.SelectedValue) && gv.SubjectID == s.SubjectID)
                        {
                            dt.Rows.Add(s.SubjectID, s.Description);
                        }
                    });
                }
            });

            foreach (DataRow dRow in dt.DefaultView.ToTable(true, new string[] { "SubjectID", "SubjectDescription" }).Rows)
            {
                cboSubject.Items.Add(dRow[1].ToString());
                cboSubject.Items[cboSubject.Items.Count - 1].Value = dRow[0].ToString();
            }
        }

        void loadSections()
        {
            cboSection.Items.Clear();
            cboSection.Items.Add("--- Select Section ---");
            cboSection.Items[cboSection.Items.Count - 1].Value = "0";

            oRegistrationTerm = new List<Constructors.RegistrationTerm>(cls.getRegistrationTerm());
            oGradingView = new List<Constructors.GradingView>(cls.getGradingView());

            DataTable dt = new DataTable();
            dt.Columns.Add(new DataColumn("SectionID"));
            dt.Columns.Add(new DataColumn("SectionDescription"));

            oGradingView.ForEach(gv =>
            {
                if (gv.TeacherID.ToString() == cboTeacher.SelectedValue)
                {
                    oRegistrationTerm.ForEach(s =>
                    {
                        if (s.LevelID == Convert.ToInt32(cboGradeLevel.SelectedValue) && gv.SectionID == s.SectionID)
                        {
                            dt.Rows.Add(s.SectionID, s.SectionDescription);
                        }
                    });
                }
            });

            foreach (DataRow dRow in dt.DefaultView.ToTable(true, new string[] { "SectionID", "SectionDescription" }).Rows)
            {
                cboSection.Items.Add(dRow[1].ToString());
                cboSection.Items[cboSection.Items.Count - 1].Value = dRow[0].ToString();
            }
        }

        protected void cboGradeLevel_SelectedIndexChanged(object sender, EventArgs e)
        {
            loadSubjects();
            loadSections();
            loadAssessment();
            loadAssessmentEvaluation();
        }

        protected void cboSection_SelectedIndexChanged(object sender, EventArgs e)
        {
            loadAssessmentEvaluation();
        }

        protected void cboSubject_SelectedIndexChanged(object sender, EventArgs e)
        {
            loadAssessment();
            loadAssessmentEvaluation();
        }

        protected void cboAssessmentType_SelectedIndexChanged(object sender, EventArgs e)
        {
            loadAssessment();
            loadAssessmentEvaluation();
        }

        protected void lnkView_Click(object sender, EventArgs e)
        {
            loadAssessmentEvaluation();
        }
    }
}
